import asyncio
import random
import time
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
users_db = {}

# –ö–∞—Ä—Ç–æ—á–∫–∏
cards = {
    "common": [
        "–®–ª—è–ø–Ω–∏–∫ (Hage Village Elder)", "–†–µ–±–µ–∫–∫–∞ –°–∫–∞—Ä–ª–µ—Ç", "–ö–∞—à–æ–Ω", 
        "–î—Ä–æ—Ç", "–ì–æ—Ä–¥–æ–Ω –ê–≥—Ä–∏–ø–ø–∞", "–≠–Ω", "–õ–∏–±–æ–Ω", "–†—É—è", "–ù–∏–µ—Ä", 
        "–î–∂—É–¥–∂–æ", "–®–∞–ª–ª—å", "–§—Ä–∞–≥–≥–∏–ª", "–ë—É—Ñ—Ñ–∞–ª", "–õ—É–º–∏–µ—Ä", "–ü—Ä–∞–¥",
        "–°–∏—Å—Å–∏", "–î–∂–µ–ª—Å", "–†–æ–Ω–Ω–µ", "–•–æ–ª–ª", "–®—É–∫—É—Ä"
    ],
    "uncommon": [
        "–ì–∞—É—á–µ –ê–¥–ª–∞–π", "–õ—ç–Ω–≥—Ä–∏—Å –í–æ–¥—å—ë", "–õ–µ—Ç–æ–ª–∏–ª –ë–µ–π–∫–æ", 
        "–°–æ–ª –ú–∞—Ä—Ä–æ–Ω", "–†–∏–ª–ª –ë–æ–π—Å–≤–∏—Ç", "–§–µ–∑–µ –¢–∞–π—Ä–µ–ª–ª", "–ö–∏—Ñ—Ñ", 
        "–ë–∞—Ä—Ç–æ", "–ó–æ—Ä–∞ –ò–¥–µ–∞–ª–µ", "–ì—Ä–µ—è", "–ì–∞–¥–∂–∏", "–ú–∞—Ä–∫—Å –§—Ä–∞–Ω—Å—É–∞",
        "–î—ç–≤–∏–¥ –°–≤–æ–Ω", "–†—É–º–æ", "–•–∞–º–æ–Ω"
    ],
    "rare": [
        "–ù–æ—ç–ª—å –°–∏–ª—å–≤–∞", "–§–∏–Ω—Ä–∞–ª –†—É–ª–∫–µ–π—Å–∏", "–õ–µ–æ–ø–æ–ª—å–¥ –í–µ—Ä–º–∏–ª–ª–∏–æ–Ω", 
        "–ú–∏–º–æ–∑–∞ –í–µ—Ä–º–∏–ª–ª–∏–æ–Ω", "–ö–∏—Ä–∏–Ω", "–®–∞—Ä–º –ü–∞–ø–∏—Ç—Ç—Å–æ–Ω", "–†–∞–¥–µ—Å –°–ø–∏—Ä–∏—Ç–æ",
        "–í–∞–ª—Ç–æ—Å", "–§–∞–Ω–∞", "–õ–µ—Ç–æ", "–°–∏—Ñ", "–ì–æ—Ä–¥–æ–Ω"
    ],
    "legendary": [
        "–Ø–º–∏ –°—É–∫—ç—Ö–∏—Ä–æ", "–®–∞—Ä–ª–æ—Ç—Ç–∞ –†–æ–∑–µ–ª–∏", "–î–∂–µ–∫ –£–∂–∞—Å–Ω—ã–π", 
        "–í–∏–ª—å—è–º –í–∞–Ω–≥–µ–∞–Ω—Å", "–î–æ—Ä–æ—Ç–∏ –ê–Ω—Å–≤–æ—Ä—Ç", "–ì–µ–Ω—Ä–∏ –õ–µ–≥–∞—Ç",
        "–Æ–ª–∏—É—Å –ù–æ–≤–∞—Ö—Ä–æ–Ω–æ", "–ú–µ—Ä–µ–ª–µ–æ–Ω–∞ –í–µ—Ä–º–∏–ª–ª–∏–æ–Ω"
    ],
    "limited": ["–ê—Å—Ç–∞", "–Æ–Ω–æ"]
}

# –®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è
drop_rates = {
    "common": 98.989,  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    "uncommon": 0.1,   # –£–º–µ–Ω—å—à–µ–Ω–∞
    "rare": 0.01,       # –£–º–µ–Ω—å—à–µ–Ω–∞
    "legendary": 0.0001, # –°–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–∞
    "limited": 0.000001   # –ö—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–∏–µ
}

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
achievements = {
    "limited_drop": "–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É",
    "all_common": "–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã",
    "all_rarities": "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã –≤—Å–µ—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π",
    "three_legendary": "–ü–æ–ª—É—á–∏—Ç—å 3 –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã",
    "first_drop": "–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É"
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_db:
        users_db[user_id] = {
            "cards": [], 
            "last_drop": 0, 
            "achievements": [],
            "first_drop": False
        }
        await message.answer(
            "üé¥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ '–ß—ë—Ä–Ω—ã–π –ö–ª–µ–≤–µ—Ä'!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ –∫–∞—Ä—Ç–∞ - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É (—Ä–∞–∑ –≤ 3 —á–∞—Å–∞)\n"
            "‚Ä¢ –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ –º–æ–∏ –∫–∞—Ä—Ç—ã - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–∞—Ä—Ç\n"
            "‚Ä¢ –æ–±—ã—á–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –Ω–µ–æ–±—ã—á–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ —Ä–µ–¥–∫–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –ª–∏–º–∏—Ç - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        )
        # –î–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É —Å—Ä–∞–∑—É
        await give_random_card(user_id, message)
    else:
        await message.answer(
            "üé¥ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ '–ß—ë—Ä–Ω—ã–π –ö–ª–µ–≤–µ—Ä'!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ –∫–∞—Ä—Ç–∞ - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É (—Ä–∞–∑ –≤ 3 —á–∞—Å–∞)\n"
            "‚Ä¢ –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ –º–æ–∏ –∫–∞—Ä—Ç—ã - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–∞—Ä—Ç\n"
            "‚Ä¢ –æ–±—ã—á–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –Ω–µ–æ–±—ã—á–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ —Ä–µ–¥–∫–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –ª–∏–º–∏—Ç - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        )

async def give_random_card(user_id, message):
    """–í—ã–¥–∞—á–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–æ–∫"""
    user_data = users_db[user_id]
    
    # –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
    rarity = random.choices(
        list(drop_rates.keys()),
        weights=list(drop_rates.values()),
        k=1
    )[0]
    card = random.choice(cards[rarity])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
    is_duplicate = card in user_data["cards"]
    
    if not is_duplicate:
        user_data["cards"].append(card)
    
    user_data["last_drop"] = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    check_achievements(user_id)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = ""
    if rarity == "limited":
        message_text = (
            f"üéâ <b>–ù–ï–í–ï–†–û–Ø–¢–ù–û! –õ–ò–ú–ò–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ö–ê–†–¢–ê!</b> üéâ\n"
            f"üî• <b>{card}</b> —Ç–µ–ø–µ—Ä—å –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!\n"
            f"‚≠ê –®–∞–Ω—Å: 0.001%!"
        )
    else:
        if is_duplicate:
            message_text = (
                f"üÉè –í—ã–ø–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞:\n"
                f"<b>{card}</b> ({rarity})\n"
                f"–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!"
            )
        else:
            message_text = (
                f"üé¥ –¢—ã –ø–æ–ª—É—á–∏–ª: <b>{card}</b> ({rarity})\n"
                "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã —Ä–∞–∑ –≤ 3 —á–∞—Å–∞!"
            )
    
    await message.answer(message_text, parse_mode="HTML")
    
    # –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞
    if not user_data["first_drop"] and not is_duplicate:
        user_data["first_drop"] = True
        user_data["achievements"].append("first_drop")
        await message.answer(
            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ–π!</b>\n"
            "–¢—ã –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: <b>–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É</b>",
            parse_mode="HTML"
        )

@dp.message(lambda message: message.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user_data = users_db.get(message.from_user.id, {"cards": [], "achievements": []})
    has_limited = any(card in cards["limited"] for card in user_data["cards"])
    
    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> {message.from_user.full_name}\n"
        f"üé¥ <b>–ö–∞—Ä—Ç–æ—á–µ–∫:</b> {len(user_data['cards'])}\n"
        f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:</b> {len(user_data['achievements'])}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –æ–±—ã—á–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
        "‚Ä¢ –Ω–µ–æ–±—ã—á–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
        "‚Ä¢ —Ä–µ–¥–∫–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã\n"
        "‚Ä¢ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
        "‚Ä¢ –ª–∏–º–∏—Ç - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
        "‚Ä¢ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
    )
    
    if has_limited:
        text += "\n\n‚≠ê <b>–£ –≤–∞—Å –µ—Å—Ç—å LIMITED –∫–∞—Ä—Ç—ã!</b> ‚≠ê"
    
    await message.answer(text, parse_mode="HTML")

@dp.message(lambda message: message.text.lower() == "–∫–∞—Ä—Ç–∞")
async def get_card(message: types.Message):
    user_id = message.from_user.id
    user_data = users_db.setdefault(user_id, {
        "cards": [], 
        "last_drop": 0, 
        "achievements": [],
        "first_drop": False
    })
    
    current_time = time.time()
    cooldown = 3 * 60 * 60  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    if current_time - user_data["last_drop"] < cooldown:
        remaining = cooldown - (current_time - user_data["last_drop"])
        hours = int(remaining // 3600)
        minutes = int((remaining % 3600) // 60)
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {hours}—á {minutes}–º–∏–Ω")
        return
    
    await give_random_card(user_id, message)

@dp.message(lambda message: message.text.lower() == "–º–æ–∏ –∫–∞—Ä—Ç—ã")
async def show_all_cards(message: types.Message):
    user_data = users_db.get(message.from_user.id, {"cards": []})
    
    if not user_data["cards"]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫!")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    cards_by_rarity = {rarity: [] for rarity in cards}
    for card in user_data["cards"]:
        for rarity in cards:
            if card in cards[rarity]:
                cards_by_rarity[rarity].append(card)
                break
    
    text = "üìä <b>–í—Å–µ –≤–∞—à–∏ –∫–∞—Ä—Ç—ã:</b>\n"
    for rarity, card_list in cards_by_rarity.items():
        if card_list:
            text += f"\n<b>{rarity.capitalize()} ({len(card_list)}):</b>\n"
            text += ", ".join(card_list) + "\n"
    
    await message.answer(text, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@dp.message(lambda message: message.text.lower() == "–æ–±—ã—á–Ω—ã–µ")
async def show_common_cards(message: types.Message):
    await show_cards_by_rarity(message, "common")

@dp.message(lambda message: message.text.lower() == "–Ω–µ–æ–±—ã—á–Ω—ã–µ")
async def show_uncommon_cards(message: types.Message):
    await show_cards_by_rarity(message, "uncommon")

@dp.message(lambda message: message.text.lower() == "—Ä–µ–¥–∫–∏–µ")
async def show_rare_cards(message: types.Message):
    await show_cards_by_rarity(message, "rare")

@dp.message(lambda message: message.text.lower() == "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ")
async def show_legendary_cards(message: types.Message):
    await show_cards_by_rarity(message, "legendary")

@dp.message(lambda message: message.text.lower() == "–ª–∏–º–∏—Ç")
async def show_limited_cards(message: types.Message):
    await show_cards_by_rarity(message, "limited")

async def show_cards_by_rarity(message: types.Message, rarity: str):
    user_data = users_db.get(message.from_user.id, {"cards": []})
    user_cards = [card for card in user_data["cards"] if card in cards[rarity]]
    
    if not user_cards:
        await message.answer(f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {rarity} –∫–∞—Ä—Ç!")
        return
    
    text = f"<b>–í–∞—à–∏ {rarity} –∫–∞—Ä—Ç—ã ({len(user_cards)}):</b>\n"
    text += "\n".join(f"‚Ä¢ {card}" for card in user_cards)
    await message.answer(text, parse_mode="HTML")

@dp.message(lambda message: message.text.lower() == "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: types.Message):
    user_data = users_db.get(message.from_user.id, {"achievements": []})
    
    if not user_data["achievements"]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!")
        return
    
    text = "üèÜ <b>–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
    for achievement in user_data["achievements"]:
        text += f"‚Ä¢ {achievements[achievement]}\n"
    
    await message.answer(text, parse_mode="HTML")

def check_achievements(user_id):
    user_data = users_db[user_id]
    cards_list = user_data["cards"]
    
    conditions = {
        "limited_drop": any(card in cards["limited"] for card in cards_list),
        "all_common": all(card in cards_list for card in cards["common"]),
        "three_legendary": sum(1 for card in cards_list if card in cards["legendary"]) >= 3,
        "all_rarities": (
            any(card in cards["common"] for card in cards_list) and
            any(card in cards["uncommon"] for card in cards_list) and
            any(card in cards["rare"] for card in cards_list) and
            any(card in cards["legendary"] for card in cards_list) and
            any(card in cards["limited"] for card in cards_list)
        )
    }
    
    for achievement, condition in conditions.items():
        if condition and achievement not in user_data["achievements"]:
            user_data["achievements"].append(achievement)

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
ADMINS = [1909652995]  # –í–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞

@dp.message(lambda message: message.from_user.id in ADMINS and message.text.lower() == "–∞–¥–º–∏–Ω")
async def admin_panel(message: types.Message):
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "‚Ä¢ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—ã [—á–∏—Å–ª–æ] - –æ—Ç–∫—Ä—ã—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç\n"
        "‚Ä¢ —Å–±—Ä–æ—Å–∏—Ç—å –∫–¥ - —Å–±—Ä–æ—Å–∏—Ç—å –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç"
    )

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥)

@dp.message(lambda message: message.from_user.id in ADMINS and message.text.lower().startswith("–æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—ã"))
async def open_multiple_cards(message: types.Message):
    try:
        num = int(message.text.split()[-1])
        if num <= 0:
            await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
            
        user_id = message.from_user.id
        user_data = users_db.setdefault(user_id, {"cards": [], "achievements": []})
        
        results = {
            "common": {"new": [], "duplicates": []},
            "uncommon": {"new": [], "duplicates": []},
            "rare": {"new": [], "duplicates": []},
            "legendary": {"new": [], "duplicates": []},
            "limited": {"new": [], "duplicates": []}
        }
        
        for _ in range(num):
            rarity = random.choices(
                list(drop_rates.keys()),
                weights=list(drop_rates.values()),
                k=1
            )[0]
            card = random.choice(cards[rarity])
            
            if card in user_data["cards"]:
                results[rarity]["duplicates"].append(card)
            else:
                results[rarity]["new"].append(card)
                user_data["cards"].append(card)
            
            check_achievements(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = f"<b>–û—Ç–∫—Ä—ã—Ç–æ {num} –∫–∞—Ä—Ç:</b>\n\n"
        total_new = 0
        total_duplicates = 0
        
        for rarity in results:
            new_count = len(results[rarity]["new"])
            dup_count = len(results[rarity]["duplicates"])
            
            if new_count + dup_count > 0:
                result_message += (
                    f"<b>{rarity.capitalize()}:</b>\n"
                    f"‚Ä¢ –ù–æ–≤—ã–µ: {new_count}\n"
                    f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä—ã: {dup_count}\n\n"
                )
            
            total_new += new_count
            total_duplicates += dup_count
        
        result_message += (
            f"<b>–ò—Ç–æ–≥–æ:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç: {total_new}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–∫: {total_duplicates}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {len(user_data['cards'])}"
        )
        
        await message.answer(result_message, parse_mode="HTML")
        
    except (ValueError, IndexError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—ã [—á–∏—Å–ª–æ]'")

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@dp.message(lambda message: message.from_user.id in ADMINS and message.text.lower() == "—Å–±—Ä–æ—Å–∏—Ç—å –∫–¥")
async def reset_cooldown(message: types.Message):
    user_id = message.from_user.id
    if user_id in users_db:
        users_db[user_id]["last_drop"] = 0
    await message.answer("–ö—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—à–µ–Ω!")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())